esphome:
  name: weather-station-display

esp8266:
  board: esp12e

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "2b1f63943406a45539cc0dcf3e847d0f"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Weather-Station-Display"
    password: "9xalnoZ2cXxi"

captive_portal:
    
time:
  - platform: homeassistant
    id: esptime

sensor:
  - platform: homeassistant
    id: out_temp
    entity_id: sensor.outside_temperature
    internal: true

  - platform: homeassistant
    id: out_humid
    entity_id: sensor.outside_humidity
    internal: true


  - platform: homeassistant
    id: in_temp
    entity_id: sensor.bedroom_tempeature
    internal: true

  - platform: homeassistant
    id: in_humid
    entity_id: sensor.bedroom_humidity
    internal: true

binary_sensor:
  - platform: homeassistant
    id: backlight
    entity_id: input_boolean.weather_station_backlight
    on_press:
      then:
        - lambda: |-
            id(main_display).backlight();
    on_release:
      then:
        - lambda: |-
            id(main_display).no_backlight();

i2c:
  sda: GPIO4
  scl: GPIO5
  
display:
  - platform: lcd_pcf8574
    dimensions: 20x4
    address: 0x27
    id: main_display
    lambda: |-
      it.strftime(0, 0, "%d.%m.%Y", id(esptime).now());

      it.strftime(12, 0, "%H:%M:%S", id(esptime).now());

      it.printf(0, 1, "Venek:");
      if (id(out_temp).has_state()) {
        it.printf(0, 2, "%.1fC", id(out_temp).state);
      }
      if (id(out_humid).has_state()) {
        it.printf(0, 3, "%.1f%%", id(out_humid).state);
      }

      it.printf(12, 1, "Vnitrek:");
      if (id(in_temp).has_state()) {
        it.printf(15, 2, "%.1fC", id(in_temp).state);
      }
      if (id(in_humid).has_state()) {
        it.printf(15, 3, "%.1f%%", id(in_humid).state);
      }